LLM File Collector Output
Root Directory: C:\src\FolderToLLM
Execution Timestamp: 2025-05-22 18:20:18
==================================================

DIRECTORY STRUCTURE:
--------------------------------------------------
├── CollectAndPrint.ps1
├── folderToLLM.bat
├── Format-OutputString.ps1
├── Get-DirectoryStructure.ps1
├── Get-FilteredFiles.ps1
└── Read-TextFileContent.ps1

==================================================
FILE CONTENTS:
--------------------------------------------------

--- START: C:\src\FolderToLLM\CollectAndPrint.ps1 (4638 bytes) ---
# CollectAndPrint.ps1 - Main script to collect directory structure and file contents.

[CmdletBinding()]
param(
    # Default root path to the current directory where the script is run.
    [string]$RootPath = (Get-Location).Path,

    # Folders to include. If specified, only files in these folders (and subfolders) are processed.
    [string[]]$IncludeFolderPaths = @(),

    # Folders to exclude. Default to "node_modules". User can override or add more.
    [string[]]$ExcludeFolderPaths = @("node_modules"), # Default exclusion

    # File extensions to include. If specified, only files with these extensions are processed.
    [string[]]$IncludeExtensions = @(),

    # File extensions to exclude. Default to ".env". User can override or add more.
    [string[]]$ExcludeExtensions = @(".env"), # Default exclusion

    # Minimum file size in bytes. -1 for no limit.
    [long]$MinFileSize = -1,

    # Maximum file size in bytes. Default to 1MB (1024 * 1024 bytes). -1 for no limit.
    [long]$MaxFileSize = 1048576, # Default max size: 1MB
    
    # Prefix for the output file name.
    [string]$OutputFileNamePrefix = "LLM_Output"
)

# Dot-source the helper scripts to make their functions available.
# Ensure these .ps1 files are in the same directory as this script, or provide full paths.
try {
    . "$PSScriptRoot\Get-DirectoryStructure.ps1"
    . "$PSScriptRoot\Get-FilteredFiles.ps1"
    . "$PSScriptRoot\Read-TextFileContent.ps1"
    . "$PSScriptRoot\Format-OutputString.ps1"
}
catch {
    Write-Error "Failed to load helper scripts. Ensure they are in the same directory: $PSScriptRoot. Error: $($_.Exception.Message)"
    exit 1
}

Write-Host "Processing directory: $RootPath"
Write-Host "Effective ExcludeFolderPaths: $($ExcludeFolderPaths -join ', ')"
Write-Host "Effective ExcludeExtensions: $($ExcludeExtensions -join ', ')" # This is from CollectAndPrint's scope
Write-Host "Effective MaxFileSize: $MaxFileSize bytes" # This is from CollectAndPrint's scope


# 1. Get Directory Structure
Write-Host "Generating directory structure..."
$directoryStructureString = Get-DirectoryStructureFormatted -Path $RootPath

# 2. Get Filtered Files
Write-Host "Filtering files..."
# Normalize extension filters (ensure they start with a dot and are lowercase)
$normalizedIncludeExtensions = @($IncludeExtensions | ForEach-Object { ($_.ToLowerInvariant() -replace '^\*?(?!\.)','.') })
$normalizedExcludeExtensions = @($ExcludeExtensions | ForEach-Object { ($_.ToLowerInvariant() -replace '^\*?(?!\.)','.') })

# Ensure $filteredFileItems is always an array.
# Explicitly pass parameters to Get-FilteredFileItems.
$filteredFileItems = @(Get-FilteredFileItems -RootPath $RootPath `
                                            -IncludeFolders $IncludeFolderPaths `
                                            -ExcludeFolders $ExcludeFolderPaths `
                                            -IncludeExtensions $normalizedIncludeExtensions `
                                            -ExcludeExtensions $normalizedExcludeExtensions `
                                            -MinSize $MinFileSize `
                                            -MaxSize $MaxFileSize) # This is the MaxFileSize from CollectAndPrint's param block

Write-Host "Found $($filteredFileItems.Count) files matching criteria."

# 3. Format the output (File contents will be read by Format-OutputString via the scriptblock)
Write-Host "Formatting output..."
$finalOutput = New-FormattedOutput -RootDirectory $RootPath `
    -DirectoryStructure $directoryStructureString `
    -FileItems $filteredFileItems `
    -ContentReader { param($FileItem) Read-SafeTextFileContent -FileItem $FileItem } # Pass our reader function

# 4. Output to File
$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$outputFilePath = Join-Path -Path $RootPath -ChildPath "$($OutputFileNamePrefix)_$timestamp.txt"

try {
    Write-Host "Writing output to: $outputFilePath"
    $finalOutput | Out-File -FilePath $outputFilePath -Encoding UTF8 -Force
    Write-Host "Successfully generated output file."
}
catch {
    Write-Error "Failed to write output file: $($_.Exception.Message)"
}

# Optional: Display a snippet or confirmation
if ((Test-Path $outputFilePath) -and (Get-Item $outputFilePath).Length -lt 20000) { # If file is small enough
    Write-Host "`n--- Output File Preview (first 20 lines) ---"
    Get-Content $outputFilePath -TotalCount 20
} elseif (Test-Path $outputFilePath) {
    Write-Host "`nOutput file is large. Preview skipped."
}

Write-Host "Script finished."
--- END: C:\src\FolderToLLM\CollectAndPrint.ps1 ---

--- START: C:\src\FolderToLLM\folderToLLM.bat (477 bytes) ---
@echo off
REM MODIFY THIS SECTION CAREFULLY!
REM Full path to the CollectAndPrint.ps1 script:
set "MAIN_SCRIPT_PATH=C:\src\FolderToLLM\CollectAndPrint.ps1"

REM Run the main script using PowerShell.exe and pass all arguments (%*).
REM -NoProfile: Does not load the PowerShell profile, starts faster.
REM -ExecutionPolicy Bypass: Temporarily relaxes the execution policy (use with caution).
powershell.exe -NoProfile -ExecutionPolicy Bypass -File "%MAIN_SCRIPT_PATH%" %*
--- END: C:\src\FolderToLLM\folderToLLM.bat ---

--- START: C:\src\FolderToLLM\Format-OutputString.ps1 (1873 bytes) ---
# Format-OutputString.ps1

function New-FormattedOutput {
    # Function to create the final formatted output string.
    param(
        [string]$RootDirectory,
        [string]$DirectoryStructure,
        [System.Collections.IEnumerable]$FileItems, # Collection of FileInfo objects
        [scriptblock]$ContentReader # Scriptblock to call for reading content, e.g., { Read-SafeTextFileContent -FileItem $_ }
    )

    $outputBuilder = New-Object System.Text.StringBuilder

    [void]$outputBuilder.AppendLine("LLM File Collector Output")
    [void]$outputBuilder.AppendLine("Root Directory: $RootDirectory")
    [void]$outputBuilder.AppendLine("Execution Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')")
    [void]$outputBuilder.AppendLine("=" * 50)
    [void]$outputBuilder.AppendLine()
    [void]$outputBuilder.AppendLine("DIRECTORY STRUCTURE:")
    [void]$outputBuilder.AppendLine("-" * 50)
    [void]$outputBuilder.AppendLine($DirectoryStructure)
    [void]$outputBuilder.AppendLine()
    [void]$outputBuilder.AppendLine("=" * 50)
    [void]$outputBuilder.AppendLine("FILE CONTENTS:")
    [void]$outputBuilder.AppendLine("-" * 50)
    [void]$outputBuilder.AppendLine()

    if ($FileItems) {
        foreach ($fileItem in $FileItems) {
            [void]$outputBuilder.AppendLine("--- START: $($fileItem.FullName) ($($fileItem.Length) bytes) ---")
            $content = . $ContentReader -FileItem $fileItem # Invoke the provided scriptblock
            [void]$outputBuilder.AppendLine($content)
            [void]$outputBuilder.AppendLine("--- END: $($fileItem.FullName) ---")
            [void]$outputBuilder.AppendLine()
        }
    } else {
        [void]$outputBuilder.AppendLine("No files matched the criteria or were found.")
    }
    
    return $outputBuilder.ToString()
}

# Removed Export-ModuleMember
--- END: C:\src\FolderToLLM\Format-OutputString.ps1 ---

--- START: C:\src\FolderToLLM\Get-DirectoryStructure.ps1 (2183 bytes) ---
# Get-DirectoryStructure.ps1

function Get-DirectoryStructureFormatted {
    # Function to recursively get the directory structure as a formatted string.
    param(
        [string]$Path,
        [string]$Indent = ""
    )

    $childItems = Get-ChildItem -Path $Path -ErrorAction SilentlyContinue
    # Separate directories and files and sort them by name for consistent order
    $directories = $childItems | Where-Object {$_.PSIsContainer} | Sort-Object Name
    $files = $childItems | Where-Object {!$_.PSIsContainer} | Sort-Object Name
    
    $outputLines = @() # Use an array to build lines
    
    $totalChildrenCount = $directories.Count + $files.Count
    $processedChildrenCount = 0

    # Process directories
    foreach ($dir in $directories) {
        $processedChildrenCount++
        $isThisChildTheVeryLast = ($processedChildrenCount -eq $totalChildrenCount)
        
        # Determine the prefix for the current directory entry
        $linePrefix = if ($isThisChildTheVeryLast) { "└── " } else { "├── " }
        $outputLines += "$Indent$linePrefix$($dir.Name)" # Removed backtick before $()
        
        # Determine the indent for the children of this directory
        $childIndentContinuation = if ($isThisChildTheVeryLast) { "    " } else { "│   " }
        $recursiveResult = Get-DirectoryStructureFormatted -Path $dir.FullName -Indent ($Indent + $childIndentContinuation)
        
        if (-not [string]::IsNullOrEmpty($recursiveResult)) {
            # Add the multi-line result from recursion to our output lines
            $outputLines += $recursiveResult
        }
    }

    # Process files
    foreach ($file in $files) {
        $processedChildrenCount++
        $isThisChildTheVeryLast = ($processedChildrenCount -eq $totalChildrenCount)
        
        # Determine the prefix for the current file entry
        $linePrefix = if ($isThisChildTheVeryLast) { "└── " } else { "├── " }
        $outputLines += "$Indent$linePrefix$($file.Name)" # Removed backtick before $()
    }

    # Join all collected lines with newlines
    return $outputLines -join "`n"
}
--- END: C:\src\FolderToLLM\Get-DirectoryStructure.ps1 ---

--- START: C:\src\FolderToLLM\Get-FilteredFiles.ps1 (6041 bytes) ---
# Get-FilteredFiles.ps1

function Get-FilteredFileItems {
    # Function to get file items based on various filter criteria.
    param(
        [string]$RootPath,
        [string[]]$IncludeFolders = @(),
        [string[]]$ExcludeFolders = @(),
        [string[]]$IncludeExtensions = @(), 
        [string[]]$ExcludeExtensions = @(), 
        [long]$MinSize = -1, 
        [long]$MaxSize = -1  
    )

    Write-Host "DEBUG: Get-FilteredFileItems called." -ForegroundColor Yellow
    Write-Host "DEBUG: RootPath: $RootPath" -ForegroundColor Yellow
    Write-Host "DEBUG: IncludeFolders: $($IncludeFolders -join ', ')" -ForegroundColor Yellow
    Write-Host "DEBUG: ExcludeFolders: $($ExcludeFolders -join ', ')" -ForegroundColor Yellow
    Write-Host "DEBUG: IncludeExtensions: $($IncludeExtensions -join ', ')" -ForegroundColor Cyan # Critical for this issue
    Write-Host "DEBUG: ExcludeExtensions: $($ExcludeExtensions -join ', ')" -ForegroundColor Yellow
    Write-Host "DEBUG: MinSize: $MinSize, MaxSize: $MaxSize" -ForegroundColor Yellow

    $allFiles = Get-ChildItem -Path $RootPath -Recurse -File -ErrorAction SilentlyContinue
    Write-Host "DEBUG: Found $($allFiles.Count) total files initially in $RootPath." -ForegroundColor Yellow

    # Using a generic list for adding items
    $filteredFileResult = New-Object System.Collections.Generic.List[System.IO.FileInfo]

    foreach ($file in $allFiles) {
        $currentFileNameForDebug = $file.Name
        $currentFileExtForDebug = $file.Extension.ToLowerInvariant()
        # Write-Host "DEBUG: ----- Processing File: '$($file.FullName)' (Ext: '$currentFileExtForDebug') -----" -ForegroundColor Magenta
        
        $shouldProcess = $true
        [string]$reasonForFiltering = "Passed initial check."

        # Folder Include Filter
        if ($IncludeFolders.Count -gt 0) {
            $matchIncludeFolder = $false
            foreach ($incFolder in $IncludeFolders) {
                $fullIncFolderPath = Join-Path $RootPath $incFolder
                $pattern = if ($incFolder.EndsWith('\*') -or $incFolder.EndsWith('/*')) { $fullIncFolderPath.Replace('\*','\*').Replace('/*','\*') } else { $fullIncFolderPath + '\*' }
                if ($file.DirectoryName -like $pattern -or $file.DirectoryName -eq $fullIncFolderPath) {
                    $matchIncludeFolder = $true; break
                }
            }
            if (-not $matchIncludeFolder) {
                $shouldProcess = $false; $reasonForFiltering = "Did not match IncludeFolders: '$($IncludeFolders -join ", ")'"
            }
        }

        # Folder Exclude Filter
        if ($shouldProcess -and $ExcludeFolders.Count -gt 0) {
            foreach ($excFolder in $ExcludeFolders) {
                $fullExcFolderPath = Join-Path $RootPath $excFolder
                $pattern = if ($excFolder.EndsWith('\*') -or $excFolder.EndsWith('/*')) { $fullExcFolderPath.Replace('\*','\*').Replace('/*','\*') } else { $fullExcFolderPath + '\*' }
                if ($file.DirectoryName -like $pattern -or $file.DirectoryName -eq $fullExcFolderPath) {
                    $shouldProcess = $false; $reasonForFiltering = "Matched ExcludeFolders: '$excFolder'"; break
                }
            }
        }

        # Extension Include Filter
        if ($shouldProcess -and $IncludeExtensions.Count -gt 0) {
            # Write-Host "DEBUG:   ExtIncl Check for '$currentFileNameForDebug'. FileExt: '$currentFileExtForDebug'. TargetExts: '$($IncludeExtensions -join '; ')'" -ForegroundColor Cyan
            if (-not ($IncludeExtensions -contains $currentFileExtForDebug)) {
                $shouldProcess = $false
                $reasonForFiltering = "Ext '$currentFileExtForDebug' NOT IN IncludeExtensions '$($IncludeExtensions -join '; ')'."
                # Write-Host "DEBUG:   '$currentFileNameForDebug' FAILED IncludeExtensions. Reason: $reasonForFiltering" -ForegroundColor Red
            } else {
                # Write-Host "DEBUG:   '$currentFileNameForDebug' PASSED IncludeExtensions." -ForegroundColor Green
            }
        }

        # Extension Exclude Filter
        if ($shouldProcess -and $ExcludeExtensions.Count -gt 0) {
            # Write-Host "DEBUG:   ExtExcl Check for '$currentFileNameForDebug'. FileExt: '$currentFileExtForDebug'. TargetExts: '$($ExcludeExtensions -join '; ')'" -ForegroundColor Cyan
            if ($ExcludeExtensions -contains $currentFileExtForDebug) {
                $shouldProcess = $false
                $reasonForFiltering = "Ext '$currentFileExtForDebug' IN ExcludeExtensions '$($ExcludeExtensions -join '; ')'."
                # Write-Host "DEBUG:   '$currentFileNameForDebug' FAILED ExcludeExtensions. Reason: $reasonForFiltering" -ForegroundColor Red
            } else {
                # Write-Host "DEBUG:   '$currentFileNameForDebug' PASSED ExcludeExtensions." -ForegroundColor Green
            }
        }

        # Min Size Filter
        if ($shouldProcess -and $MinSize -ge 0) {
            if ($file.Length -lt $MinSize) {
                $shouldProcess = $false; $reasonForFiltering = "Size $($file.Length) is less than MinSize $MinSize."
            }
        }

        # Max Size Filter
        if ($shouldProcess -and $MaxSize -ge 0) {
            if ($file.Length -gt $MaxSize) {
                $shouldProcess = $false; $reasonForFiltering = "Size $($file.Length) is greater than MaxSize $MaxSize."
            }
        }

        if ($shouldProcess) {
            # Write-Host "DEBUG: File '$($file.FullName)' PASSED ALL FILTERS." -ForegroundColor Green
            $filteredFileResult.Add($file)
        } else {
            # Write-Host "DEBUG: File '$($file.FullName)' FILTERED OUT. Final Reason: $reasonForFiltering" -ForegroundColor Red
        }
    }
    Write-Host "DEBUG: Get-FilteredFileItems returning $($filteredFileResult.Count) files." -ForegroundColor Yellow
    return $filteredFileResult
}
--- END: C:\src\FolderToLLM\Get-FilteredFiles.ps1 ---

--- START: C:\src\FolderToLLM\Read-TextFileContent.ps1 (2261 bytes) ---
# Read-TextFileContent.ps1

function Read-SafeTextFileContent {
    # Function to safely read text file content.
    # For very large files or binary files, it might return a placeholder or partial content.
    param(
        [Parameter(Mandatory=$true)]
        [System.IO.FileInfo]$FileItem,
        [long]$MaxCharsToRead = 1000000 # Limit reading to avoid memory issues with huge files, approx 1MB for UTF-8
    )

    try {
        # Basic check for common binary extensions - can be expanded
        $binaryExtensions = @(".exe", ".dll", ".zip", ".gz", ".tar", ".jpg", ".png", ".gif", ".bmp", ".iso", ".mp3", ".mp4", ".pdf", ".doc", ".xls", ".ppt") # .doc, .xls, .ppt are often binary
        if ($binaryExtensions -contains $FileItem.Extension.ToLowerInvariant()) {
            return "[Binary File: $($FileItem.Name) - Content not displayed]"
        }

        if ($FileItem.Length -eq 0) {
            return "[Empty File: $($FileItem.Name)]"
        }
        
        # Attempt to read as text
        # Using -Raw is faster for reading the whole file
        # We'll use Get-Content with -TotalCount for char limit if necessary
        if ($FileItem.Length -gt ($MaxCharsToRead * 2)) { # Approximation, actual characters depends on encoding
             Write-Warning "File $($FileItem.FullName) is very large ($($FileItem.Length) bytes). Reading up to $MaxCharsToRead characters."
             $content = Get-Content -Path $FileItem.FullName -TotalCount ($MaxCharsToRead / 200) -ErrorAction SilentlyContinue # Approx lines
             # This is a rough way to limit characters, better to read byte stream and decode
             if ($content -is [array]) { $content = $content -join "`n" }
             if ($content.Length -gt $MaxCharsToRead) {
                $content = $content.Substring(0, $MaxCharsToRead) + "... [TRUNCATED]"
             }
             return $content
        } else {
            return Get-Content -Path $FileItem.FullName -Raw -ErrorAction SilentlyContinue
        }
    }
    catch {
        # If Get-Content fails (e.g., encoding issue, locked file)
        return "[Error Reading File: $($FileItem.Name) - $($_.Exception.Message)]"
    }
}

# Removed Export-ModuleMember
--- END: C:\src\FolderToLLM\Read-TextFileContent.ps1 ---


